package {{packageName}}.infrastructure
import java.io.IOException

import okhttp3.*
import retrofit2.Call
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.util.*

interface OAuthContext {
fun getClientId(): String
fun getClientSecret(): String
fun getAccessToken(): AccessToken?

fun OnRefreshAccessToken(accessToken: AccessToken);
}


class ServiceBuilder {


private var httpClient: OkHttpClient.Builder? = null

private var builder: Retrofit.Builder? = null

//private var mContext: Context? = null
private lateinit var mToken: AccessToken



private fun createOAuthService(): APIClient {
val httpClient = OkHttpClient.Builder()
val builder = Retrofit.Builder()
.baseUrl(API_OAUTH_URL)
.addConverterFactory(GsonConverterFactory.create())

val client = httpClient.build()
val retrofit = builder.client(client).build()
return retrofit.create(APIClient::class.java)
}

private fun createAuthorization(clientId: String, clientSecret: String): String {
var authentication = "$clientId:$clientSecret"
authentication = Base64.getEncoder().encodeToString(authentication.toByteArray())
return "Basic $authentication"
}


private fun responseCount(response: Response): Int {
var response: Response? = response
var result = 1
while (response != null) {
response = response.priorResponse()
result++
}
return result
}

companion object {
val API_BASE_URL = "https://esi.evetech.net/latest/"
val API_OAUTH_URL = "https://login.eveonline.com"

fun getAccessToken(code: String, context: OAuthContext): Call<AccessToken> {
    val serviceBuilder = ServiceBuilder()
    val service = serviceBuilder.createOAuthService()
    val authorization = serviceBuilder.createAuthorization(context.getClientId(), context.getClientSecret())

    return service.getNewAccessToken(
    authorization = authorization,
    code = code,
    grantType = "authorization_code"
    )
    }

    fun <S> createService(serviceClass: Class<S>): S {
        val httpClient = OkHttpClient.Builder()
        val builder = Retrofit.Builder()
        .baseUrl(API_BASE_URL)
        .addConverterFactory(GsonConverterFactory.create())

        val client = httpClient!!.build()
        val retrofit = builder!!.client(client).build()
        return retrofit.create(serviceClass)
        }

        fun <S> createService(serviceClass: Class<S>, context: OAuthContext): S {
            val httpClient = OkHttpClient.Builder()
            val builder = Retrofit.Builder()
            .baseUrl(API_BASE_URL)
            .addConverterFactory(GsonConverterFactory.create())


            if (context.getAccessToken() != null) {
            var mToken = context.getAccessToken()!!
            httpClient!!.addInterceptor(object : Interceptor {
            @Throws(IOException::class)
            override fun intercept(chain: Interceptor.Chain): Response {
            val original = chain.request()

            val requestBuilder = original.newBuilder()
            .header("Accept", "application/json")
            .header("Content-type", "application/json")
            .header("Authorization", "Bearer ${mToken.accessToken}")
            .method(original.method(), original.body())

            val request = requestBuilder.build()
            return chain.proceed(request)
            }
            })

            val serviceBuilder = ServiceBuilder()

            httpClient!!.authenticator(Authenticator { route, response ->
            if (serviceBuilder.responseCount(response) >= 2) {
            // If both the original call and the call with refreshed token failed,
            // it will probably keep failing, so don't try again.
            return@Authenticator null
            }

            // We need a new client, since we don't want to make another call using our client with access token
            val tokenClient = serviceBuilder.createOAuthService()
            val authorization = serviceBuilder.createAuthorization(context.getClientId(), context.getClientSecret())

            val call = tokenClient.getRefreshToken(authorization, mToken.refreshToken, "refresh_token")
            try {
            val tokenResponse = call.execute()
            if (tokenResponse.code() == 200) {
            val newToken = tokenResponse.body()
            mToken = newToken!!

            context.OnRefreshAccessToken(newToken)

            return@Authenticator response.request().newBuilder()
            .header("Authorization", "Bearer ${mToken.accessToken}")
            .build()
            } else {
            return@Authenticator null
            }
            } catch (e: IOException) {
            return@Authenticator null
            }
            })
            }

            val client = httpClient!!.build()
            val retrofit = builder!!.client(client).build()
            return retrofit.create(serviceClass)
            }
            }
            }